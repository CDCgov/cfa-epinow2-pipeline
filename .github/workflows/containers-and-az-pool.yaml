name: Create Docker Image and Azure Pool

# This GitHub Actions workflow builds a Docker image for the
# cfa-epinow2-pipeline-docker project. In-container tests can be added here.

on:
  workflow_dispatch:
  pull_request:
    paths-ignore: # we don't need this to run everytime we make an edit to an irrelevant file
      - .github/workflows/block-fixup.yaml
      - .github/workflows/check-news-md.yaml
      - .github/workflows/manual-docker-prune.yml
      - .github/workflows/pkgdown.yaml
      - .github/workflows/pr-commands.yaml
      - .github/workflows/r-cmd-check.yaml
      - .github/workflows/test-coverage.yaml
      - '**.md'
    branches:
      - main
  push:
    paths-ignore: # we don't need this to run everytime we make an edit to an irrelevant file
      - .github/workflows/block-fixup.yaml
      - .github/workflows/check-news-md.yaml
      - .github/workflows/manual-docker-prune.yml
      - .github/workflows/pkgdown.yaml
      - .github/workflows/pr-commands.yaml
      - .github/workflows/r-cmd-check.yaml
      - .github/workflows/test-coverage.yaml
      - '**.md'
    branches:
      - main

env:
  # Together, these form: cfaprdbatchcr.azurecr.io/cfa-epinow2-pipeline
  REGISTRY: cfaprdbatchcr.azurecr.io/
  IMAGE_NAME: cfa-epinow2-pipeline

jobs:

  build-pipeline-image:
    runs-on: ubuntu-latest
    name: Build image

    outputs:
      tag: ${{ steps.image-tag.outputs.tag }}

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      # From: https://stackoverflow.com/a/58035262/2097171
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: branch-name

      #########################################################################
      # Getting the tag
      # The tag will be used for both the docker image and the batch pool
      #########################################################################
      - name: Figure out tag (either latest if it is main or the branch name)
        shell: bash
        id: image-tag
        run: |
          if [ "${{ steps.branch-name.outputs.branch }}" = "main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.branch-name.outputs.branch }}" >> $GITHUB_OUTPUT
          fi

      - name: Docker Login
        uses: docker/login-action@v3
        with:

          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build and push
        run: |
          chmod +x $GITHUB_WORKSPACE/.github/scripts/docker_build_and_push.sh
          $GITHUB_WORKSPACE/.github/scripts/docker_build_and_push.sh ${{ env.IMAGE_NAME }} ${{ steps.image-tag.outputs.tag }}

  acr-import:
    needs: build-pipeline-image
    runs-on: cfa-cdcgov-aca

    name: Copy image from GHCR to ACR
    outputs:
      tag: ${{ needs.build-pipeline-image.outputs.tag }}
    steps:

      - name: Azure login with OIDC
        uses: azure/login@v2
        with:
          creds: ${{ secrets.EDAV_CFA_PREDICT_NNHT_SP }}

      - name: Copy Image
        run: |
          IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ needs.build-pipeline-image.outputs.tag }}
          az acr import --name ${{ env.REGISTRY }} \
            --source "ghcr.io/cdcgov/$IMAGE_TAG" \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --image "$IMAGE_TAG" \
            --force && echo 'Copied image!'
            if [ $? -ne 0 ]; then
              echo "Failed to copy image"
            fi

  batch-pool:

    name: Create Batch Pool and Submit Jobs
    runs-on: cfa-cdcgov-aca
    needs: acr-import

    permissions:
      contents: read
      packages: write

    env:
      TAG: ${{ needs.acr-import.outputs.tag }}
      # Every Azure Batch Pool parameter can simply go here,
      # no python module or config toml necessary
      POOL_ID: "cfa-epinow2-${{ needs.acr-import.outputs.tag }}"
      BATCH_ACCOUNT:     "cfaprdba"
      BATCH_ENDPOINT:    "https://cfaprdba.eastus.batch.azure.com/"
      NODE_AGENT_SKU_ID: "batch.node.ubuntu 22.04"
      VM_SIZE:           "standard_d4d_v5"
      RESOURCE_GROUP:    ${{ secrets.PRD_RESOURCE_GROUP }}
      BATCH_SUBNET_ID:   ${{ secrets.BATCH_SUBNET_ID }}

    steps:
      - name: Checkout Repo
        id: checkout_repo
        uses: actions/checkout@v4

      # This step is only needed during the action to write the
      # config file. Users can have a config file stored in their VAP
      # sessions. In the future, we will have the config.toml file
      # distributed with the repo (encrypted).
      - name: Writing out config file
        run: |
          cat <<EOF > pool-config-${{ github.sha }}.toml
          ${{ secrets.POOL_CONFIG_TOML }}
          EOF

          # Replacing placeholders in the config file
          sed -i 's|{{ IMAGE_NAME }}|${{ env.REGISTRY }}${{ env.IMAGE_NAME }}:${{ env.TAG }}|g' pool-config-${{ github.sha }}.toml
          sed -i 's|{{ VM_SIZE }}|${{ env.VM_SIZE }}|g' pool-config-${{ github.sha }}.toml
          sed -i 's|{{ BATCH_SUBNET_ID }}|${{ env.BATCH_SUBNET_ID }}|g' pool-config-${{ github.sha }}.toml
          sed -i 's|{{ POOL_ID }}|${{ env.POOL_ID }}|g' pool-config-${{ github.sha }}.toml


      - name: Login to Azure with NNH Service Principal
        id: azure_login_2
        uses: azure/login@v2
        with:
        # managed by EDAV. Contact Amit Mantri or Jon Kislin if you have issues.
          creds: ${{ secrets.EDAV_CFA_PREDICT_NNHT_SP }}

      #########################################################################
      # Checking if the pool exists
      # This is done via az batch pool list. If there is no pool matching the
      # pool id (which is a function of the tag, i.e., branch name), then we
      # pool-exists will be ''.
      #########################################################################
      - name: Check if pool exists
        id: check_pool_id
        run: |

          az batch account login \
            --resource-group ${{ secrets.PRD_RESOURCE_GROUP }} \
            --name "${{ env.BATCH_ACCOUNT }}"

          az batch pool list \
            --output tsv \
            --filter "(id eq '${{ env.POOL_ID }}')" \
            --query "[].[id, allocationState, creationTime]" > \
            pool-list-${{ github.sha }}

          echo "pool-exists=$(cat pool-list-${{ github.sha }})" >> \
            $GITHUB_OUTPUT

      - name: Create cfa-epinow2-pipeline Pool
        id: create_batch_pool

        # This is a conditional step that will only run if the pool does not
        # exist
        if: ${{ steps.check_pool_id.outputs.pool-exists == '' }}

        # The call to the az cli that actually generates the pool
        run: |
          # Running the python script azure/pool.py passing the config file
          # as an argument
          pip install -r azure/requirements.txt
          python3 azure/pool.py \
            pool-config-${{ github.sha }}.toml \
            batch-autoscale-formula.txt
