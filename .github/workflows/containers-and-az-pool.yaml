name: Create Docker Image and Azure Pool

# This GitHub Actions workflow builds a Docker image for the
# cfa-epinow2-pipeline-docker project. In-container tests can be added here.

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # Together, these form: cfaprdbatchcr.azurecr.io/cfa-epinow2-pipeline
  REGISTRY: cfaprdbatchcr.azurecr.io
  IMAGE_NAME: cfa-epinow2-pipeline

jobs:

  build-dependencies-image:
    runs-on: cfa-cdcgov # VM based runner serving CFA's cdcgov repos (as opposed to cdcent)
    name: Build dependencies image

    outputs:
      tag: ${{ steps.image-tag.outputs.tag }}
      commit-msg: ${{ steps.commit-message.outputs.message }}

    steps:

      #########################################################################
      # Retrieving the commit message
      # We need to ensure we are checking out the commit sha that triggered the
      # workflow, not the PR's head sha. This is because the PR's head sha may
      # be a merge commit, which will not have the commit message we need.
      #########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Getting the commit message
        id: commit-message
        run: echo "message=$(git log -1 --pretty=%s HEAD)" >> $GITHUB_OUTPUT

      - name: Checking out the latest (may be merge if PR)
        uses: actions/checkout@v4

      # From: https://stackoverflow.com/a/58035262/2097171
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: branch-name

      #########################################################################
      # Getting the tag
      # The tag will be used for both the docker image and the batch pool
      #########################################################################
      - name: Figure out tag (either latest if it is main or the branch name)
        id: image-tag
        run: |
          if [ "${{ steps.branch-name.outputs.branch }}" = "main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.branch-name.outputs.branch }}" >> $GITHUB_OUTPUT
          fi

      - name: Check cache for base image
        uses: actions/cache@v4
        id: cache
        with:
          key: docker-dependencies-${{ runner.os }}-${{ hashFiles('./DESCRIPTION', './Dockerfile-dependencies') }}-${{ steps.image-tag.outputs.tag }}
          lookup-only: true
          path:
            ./DESCRIPTION

      - name: Login to the Container Registry
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/login-action@v3
        with:
          registry: "cfaprdbatchcr.azurecr.io"
          username: "cfaprdbatchcr"
          password: ${{ secrets.CFAPRDBATCHCR_REGISTRY_PASSWORD }}

      - name: Build and push
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}-dependencies:${{ steps.image-tag.outputs.tag }}
          file: ./Dockerfile-dependencies

  build-pipeline-image:

    name: Build pipeline image

    needs: build-dependencies-image
    runs-on: cfa-cdcgov

    outputs:
      tag: ${{ needs.build-dependencies-image.outputs.tag }}
      commit-msg: ${{ needs.build-dependencies-image.outputs.commit-msg }}

    steps:

      - name: Login to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: "cfaprdbatchcr.azurecr.io"
          username: "cfaprdbatchcr"
          password: ${{ secrets.CFAPRDBATCHCR_REGISTRY_PASSWORD }}

      - name: Build and push model pipeline image for Azure batch
        id: build_and_push_model_image
        uses: docker/build-push-action@v6
        with:
          push: true # This can be toggled manually for tweaking.
          tags: |
            ${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}:test-${{ needs.build-dependencies-image.outputs.tag }}
          file: ./Dockerfile
          build-args: |
            TAG=${{ needs.build-dependencies-image.outputs.tag }}

  batch-pool:

    name: Create Batch Pool and Submit Jobs
    runs-on: cfa-cdcgov
    needs: build-pipeline-image

    permissions:
      contents: read
      packages: write

    env:
      TAG: ${{ needs.build-pipeline-image.outputs.tag }}
      COMMIT_MSG: ${{ needs.build-pipeline-image.outputs.commit-msg }}
      # Every Azure Batch Pool parameter can simply go here,
      # no python module or config toml necessary
      POOL_ID: "cfa-epinow2-${{ needs.build-pipeline-image.outputs.tag }}"
      BATCH_ACCOUNT:     "cfaprdba"
      BATCH_ENDPOINT:    "https://cfaprdba.eastus.batch.azure.com/"
      VM_IMAGE_TAG:      "canonical:0001-com-ubuntu-server-focal:20_04-lts"
      NODE_AGENT_SKU_ID: "batch.node.ubuntu 20.04"
      VM_SIZE:           "standard_a4m_v2"
      RESOURCE_GROUP:    ${{ secrets.PRD_RESOURCE_GROUP }}

    steps:
      - name: Checkout Repo
        id: checkout_repo
        uses: actions/checkout@v4

      - name: Writing out config file
        run: |
          cat <<EOF > pool-config-${{ github.sha }}.txt
          [Authentication]
          keyvault_url = "${{ secrets.CFA_PREDICT_VAULT_URL }}"
          tenant_id = "${{ secrets.TENANT_ID }}"
          application_id = "${{ secrets.EDAV_CFA_PREDICT_NNHT_SP_APP_ID}}"
          subscription_id = "${{ secrets.SUBSCRIPTION_ID}}"
          user_assigned_identity = "${{ secrets. BATCH_USER_ASSIGNED_IDENTITY }}"
          client_id = "${{ secrets.AZURE_BATCH_ACCOUNT_CLIENT_ID}}"
          principal_id = "${{ secrets.PRINCIPAL_ID }}"
          subnet_id = "${{ secrets.SUBNET_ID }}"
          resource_group = "${{ secrets.PRD_RESOURCE_GROUP }}"

          [Storage]
          storage_account_url = "${{ secrets.STORAGE_ACCOUNT_URL }}"
          storage_account_name = "${{ secrets.STORAGE_ACCOUNT_NAME}}"
          user_assigned_identity = "${{ secrets.BATCH_USER_ASSIGNED_IDENTITY}}"

          [Container]
          container_registry_url = ""https://${{ env.REGISTRY }}""
          container_registry_username = "cfaprdbatchcr"
          container_registry_password = "${{ secrets.CFAPRDBATCHCR_REGISTRY_PASSWORD }}"
          container_registry_server = "${{ env.REGISTRY }}"

          [Batch]
          pool_vm_size = "${{ env.VM_SIZE }}"
          pool_id = "${{ env.POOL_ID }}"
          batch_account_name = "${{ secrets.BATCH_ACCOUNT_NAME}}"


          EOF

      - name: Login to Azure with NNH Service Principal
        id: azure_login_2
        uses: azure/login@v2
        with:
        # managed by EDAV. Contact Amit Mantri or Jon Kislin if you have issues.
          creds: ${{ secrets.EDAV_CFA_PREDICT_NNHT_SP }}

      #########################################################################
      # Checking if the pool exists
      # This is done via az batch pool list. If there is no pool matching the
      # pool id (which is a function of the tag, i.e., branch name), then we
      # pool-exists will be ''.
      #########################################################################
      - name: Check if pool exists
        id: check_pool_id
        run: |

          az batch account login \
            --resource-group ${{ secrets.PRD_RESOURCE_GROUP }} \
            --name "${{ env.BATCH_ACCOUNT }}"

          az batch pool list \
            --output tsv \
            --filter "(id eq '${{ env.POOL_ID }}')" \
            --query "[].[id, allocationState, creationTime]" > \
            pool-list-${{ github.sha }}

          echo "pool-exists=$(cat pool-list-${{ github.sha }})" >> \
            $GITHUB_OUTPUT

      - name: Create cfa-epinow2-pipeline Pool
        id: create_batch_pool

        # This is a conditional step that will only run if the pool does not
        # exist
        if: ${{ steps.check_pool_id.outputs.pool-exists == '' }}

        # The call to the az cli that actually generates the pool
        run: |
          # Running the python script azure/pool.py passing the config file
          # as an argument
          pip3 install toml azure
          python3 azure/pool.py pool-config-${{ github.sha }}.txt


      #########################################################################
      # Deleting the pool only if (a) it exists and (b) the commit message
      # contains '[delete pool]'.
      #########################################################################
      - name: Delete the pool
        if: ${{ (steps.check_pool_id.outputs.pool-exists != '' || steps.create_batch_pool.outputs.pool-created == 'yes' ) && contains( env.COMMIT_MSG, '[delete pool]' )}}
        run: |
          az batch account login \
            --resource-group ${{ secrets.PRD_RESOURCE_GROUP }} \
            --name "${{ env.BATCH_ACCOUNT }}"

          az batch pool delete \
            --pool-id ${{ env.POOL_ID }} \
            --yes
