name: Create Docker Image and Azure Pool

# This GitHub Actions workflow builds a Docker image for the
# cfa-epinow2-pipeline-docker project. In-container tests can be added here.

on:
  workflow_dispatch:
  pull_request:
    paths-ignore: # we don't need this to run everytime we make an edit to an irrelevant file
      - .github/workflows/block-fixup.yaml
      - .github/workflows/check-news-md.yaml
      - .github/workflows/manual-docker-prune.yml
      - .github/workflows/pkgdown.yaml
      - .github/workflows/pr-commands.yaml
      - .github/workflows/r-cmd-check.yaml
      - .github/workflows/test-coverage.yaml
      - '**.md'
    branches:
      - main
  push:
    paths-ignore: # we don't need this to run everytime we make an edit to an irrelevant file
      - .github/workflows/block-fixup.yaml
      - .github/workflows/check-news-md.yaml
      - .github/workflows/manual-docker-prune.yml
      - .github/workflows/pkgdown.yaml
      - .github/workflows/pr-commands.yaml
      - .github/workflows/r-cmd-check.yaml
      - .github/workflows/test-coverage.yaml
      - '**.md'
    branches:
      - main

env:
  # Together, these form: cfaprdbatchcr.azurecr.io/cfa-epinow2-pipeline
  REGISTRY: cfaprdbatchcr.azurecr.io/
  IMAGE_NAME: cfa-epinow2-pipeline

jobs:

  build-pipeline-image:
    runs-on: ubuntu-latest
    name: Build image

    outputs:
      tag: ${{ steps.image-tag.outputs.tag }}

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      # From: https://stackoverflow.com/a/58035262/2097171
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: branch-name

      #########################################################################
      # Getting the tag
      # The tag will be used for both the docker image and the batch pool
      #########################################################################
      - name: Figure out tag (either latest if it is main or the branch name)
        shell: bash
        id: image-tag
        run: |
          if [ "${{ steps.branch-name.outputs.branch }}" = "${{ inputs.main-branch-name }}" ]; then
            echo "tag=${{ inputs.main-branch-tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.branch-name.outputs.branch }}" >> $GITHUB_OUTPUT
          fi

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build and push
        run: |
          chmod +x $GITHUB_WORKSPACE/.github/scripts/docker_build_and_push.sh
          $GITHUB_WORKSPACE/.github/scripts/docker_build_and_push.sh ${{ env.IMAGE_NAME }} ${{ steps.image-tag.outputs.tag }}

      - name: ACR Import
        uses: CDCgov/cfa-actions/runner-action@runner-action
        with:
          github_app_id: ${{ secrets.CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}

            az login --service-principal \
            --username ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).clientId }} \
            --password ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).clientSecret }} \
            --tenant ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).tenantId }}

            az acr import --name ${{ env.REGISTRY }} \
              --source "ghcr.io/cdcgov/$IMAGE_TAG" \
              --username '${{ github.repository_owner }}'\
              --password ${{ secrets.GITHUB_TOKEN }} \
              --image "$IMAGE_TAG" \
              --force && echo 'Copied image!'

            if [ $? -ne 0 ]; then
              echo "Failed to copy image"
            fi

  batch-pool:

    name: Create Batch Pool and Submit Jobs
    runs-on: ubuntu-latest
    needs: build-pipeline-image

    steps:
      - name: Checkout Repo
        id: checkout_repo
        uses: actions/checkout@v4

      - name: Get current branch
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> "$GITHUB_OUTPUT"

      - name: Config & Batch Pool
        uses: CDCgov/cfa-actions/runner-action@runner-action
        with:
          github_app_id: ${{ secrets.CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            TAG=${{ needs.build-pipeline-image.outputs.tag }}
            # Every Azure Batch Pool parameter can simply go here,
            # no python module or config toml necessary
            POOL_ID= "cfa-epinow2-${{ needs.build-pipeline-image.outputs.tag }}"
            BATCH_ACCOUNT="cfaprdba"
            BATCH_ENDPOINT="https://cfaprdba.eastus.batch.azure.com/"
            VM_IMAGE_TAG="canonical:0001-com-ubuntu-server-focal:20_04-lts"
            NODE_AGENT_SKU_ID="batch.node.ubuntu 20.04"
            VM_SIZE="standard_a4m_v2"
            RESOURCE_GROUP="${{ secrets.PRD_RESOURCE_GROUP }}"

            echo "Cloning repo at branch '${{ steps.outputs.CURRENT_BRANCH }}'"
            git clone -b ${{ steps.outputs.CURRENT_BRANCH }} https://github.com/${{ github.repository }}.git
            cd cfa-epinow2-pipeline

            echo "Writing out config file"
            cat <<EOF > pool-config-${{ github.sha }}.toml
            ${{ secrets.POOL_CONFIG_TOML }}
            EOF

            # Replacing placeholders in the config file
            sed -i "s|{{ IMAGE_NAME }}|$REGISTRY/$IMAGE_NAME:$TAG|g" pool-config-${{ github.sha }}.toml
            sed -i "s|{{ VM_SIZE }}|$VM_SIZE|g" pool-config-${{ github.sha }}.toml
            sed -i "s|{{ POOL_ID }}|$POOL_ID|g" pool-config-${{ github.sha }}.toml


            echo "Login to Azure with NNH Service Principal"
            az login --service-principal \
            --username ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).clientId }} \
            --password ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).clientSecret }} \
            --tenant ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).tenantId }}

            echo "Check if pool exists"
            az batch account login \
              --resource-group ${{ secrets.PRD_RESOURCE_GROUP }} \
              --name "$BATCH_ACCOUNT"

            az batch pool list \
              --output tsv \
              --filter "(id eq '$POOL_ID')" \
              --query "[].[id, allocationState, creationTime]" > \
              pool-list-${{ github.sha }}

            if [ -s "pool-list-${{ github.sha }}" ]; then
              echo "Create cfa-epinow2-pipeline Pool"
              pip install -r azure/requirements.txt
              python3 azure/pool.py \
                pool-config-${{ github.sha }}.toml \
                batch-autoscale-formula.txt
            fi
