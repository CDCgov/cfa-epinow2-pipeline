name: Run Epinow2 Pipeline
run-name: (2) Pipeline - ${{ github.event.head_commit.message }} - ${{ github.ref_name }}

# This GitHub Actions workflow builds a Docker image for the
# cfa-epinow2-pipeline-docker project. It consists of two jobs:
# build_image_dependencies and build_image.
#
# - The `build_image_dependencies` job carries out the first part of a
#   multi-stage build. It downloads and install all the dependencies
#   listed in the `DESCRIPTION` file. It uses the `Dockerfile-dependencies`
#   file to build the image.
#
#   The built image is then pushed to the corresponding registry.
#
#   The process is cached to avoid rebuilding the image if the dependencies
#   have not changed. This is by hashing the `DESCRIPTION` file and the
#   `Dockerfile-dependencies` file.
#
# - The build_image job builds the final image using the `Dockerfile` file.
#   It uses the image built in the previous job as a base image.
#
#   During the build process, the package is installed and built. Furthermore
#   the package is checked using `R CMD check` to ensure that it is working
#   correctly.
#
#   Once the image is built, it is pushed to the corresponding registry.


on:
  push:
    branches:
      - main
      - jk-azure-readiness # temporary
  workflow_dispatch:

env:
  # Together, these form: cfaprdbatchcr.azurecr.io/cfa-epinow2-pipeline
  REGISTRY: cfaprdbatchcr.azurecr.io
  IMAGE_NAME: cfa-epinow2-pipeline

jobs:

  _01_build-model-image:
    runs-on: cfa-cdcgov #
    steps:

      - name: Login to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: "cfaprdbatchcr.azurecr.io"
          username: "cfaprdbatchcr"
          password: ${{ secrets.CFAPRDBATCHCR_REGISTRY_PASSWORD }}

      # Comment out if you want to just test the pool creation without waiting for build and push
      # - name: Build and push model pipeline image for Azure batch # second stage, the actual payload
      #   id: build_and_push_model_image
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: |
      #       ${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}:latest
      #       ${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      #     file: ./Dockerfile # second stage Dockerfile

  _02_create-batch-pool-and-submit-jobs:
    runs-on: cfa-cdcgov
    needs:
      - _01_build-model-image

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repo
        id: checkout_repo
        uses: actions/checkout@v4

      - name: Login to Azure with NNH Service Principal
        id: azure_login_2
        uses: azure/login@v2
        with:
        # managed by EDAV. Contact Amit Mantri or Jon Kislin if you have issues.
          creds: ${{ secrets.EDAV_CFA_PREDICT_NNHT_SP }}


      - name: Get Github Short sha
        run: |
          shortSHA=$(git rev-parse --short ${{ github.sha }})
          echo "SHORT_SHA=$shortSHA" >> $GITHUB_ENV

      - name: Create cfa-epinow2-pipeline Pool
        id: create_batch_pool

        # Every Azure Batch Pool parameter can simply go here,
        # no python module or config toml necessary
        env:
          POOL_ID:           "cfa-epinow2-${{ env.SHORT_SHA }}" # version the pools with the github sha
          BATCH_ACCOUNT:     "cfaprdba"
          BATCH_ENDPOINT:    "https://cfaprdba.eastus.batch.azure.com/"
          VM_IMAGE_TAG:      "canonical:0001-com-ubuntu-server-focal:20_04-lts"
          NODE_AGENT_SKU_ID: "batch.node.ubuntu 20.04"
          VM_SIZE:           "standard_a4m_v2"
          RESOURCE_GROUP:    ${{ secrets.PRD_RESOURCE_GROUP }}


        # The call to the az cli that actually generates the pool
        run: |
          az batch account login \
          --resource-group ${{ secrets.PRD_RESOURCE_GROUP }} \
          --name "${{ env.BATCH_ACCOUNT }}" \

          az batch pool create \
          --account-endpoint "${{ env.BATCH_ENDPOINT }}" \
          --id "${{ env.POOL_ID }}" \
          --image "${{ env.VM_IMAGE_TAG }}" \
          --node-agent-sku-id "${{ env.NODE_AGENT_SKU_ID }}" \
          --vm-size "${{ env.VM_SIZE }}" \

          az batch pool autoscale enable \
          --pool-id ${{ env.POOL_ID }} \
          --auto-scale-formula "$(cat './batch-autoscale-formula.txt')"

          # Let's get this POOL_ID var for the next step too
          echo "POOL_ID=${{ env.POOL_ID}}" >> $GITHUB_ENV

      # - name: legacy_test
      #   run: |
      #     az batch pool create --json-file ./cfa-epinow2-batch-pool-config.json


      - name: Submit azure batch job
        id: submit_batch_job
        env:
          POOL_ID: $POOL_ID
          BATCH_JOB_ID: cfa-epinow2-pipeline-job-${{ env.SHORT_SHA }}
        run: |
          az batch job create \
          --pool-id ${{ env.POOL_ID }} \
          --id ${{ env.BATCH_JOB_ID }}
