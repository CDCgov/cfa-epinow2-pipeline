% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/config.R
\name{Config}
\alias{Config}
\title{Config Class}
\usage{
Config(
  job_id = character(0),
  task_id = character(0),
  min_reference_date = character(0),
  max_reference_date = character(0),
  report_date = character(0),
  as_of_date = character(0),
  disease = character(0),
  geo_value = character(0),
  geo_type = character(0),
  seed = integer(0),
  horizon = integer(0),
  model = "EpiNow2",
  config_version = character(0),
  quantile_width = c(0.5, 0.95),
  data = Data(),
  priors = list(rt = list(mean = structure(list(classes = list(structure(list(class =
    "integer", constructor_name = "integer", constructor = function (.data = integer(0))
    
 .data, validator = function (object) 
 {
     if (base_class(object) != name) {
   
         sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
   
     }
 }), class = "S7_base_class"), structure(list(class = "double", constructor_name =
    "double", constructor = function (.data = numeric(0)) 
 .data, validator = function
    (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"))), class = "S7_union"), sd = structure(list(classes =
    list(structure(list(class = "integer", constructor_name = "integer", constructor =
    function (.data = integer(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), structure(list(class = "double", constructor_name =
    "double", constructor = function (.data = numeric(0)) 
 .data, validator = function
    (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"))), class = "S7_union")), gp = list(alpha_sd =
    structure(list(classes = list(structure(list(class = "integer", constructor_name =
    "integer", constructor = function (.data = integer(0)) 
 .data, validator = function
    (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), structure(list(class = "double", constructor_name =
    "double", constructor = function (.data = numeric(0)) 
 .data, validator = function
    (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"))), class = "S7_union"))),
  parameters = Parameters(),
  sampler_opts = list(cores = structure(list(class = "integer", constructor_name =
    "integer", constructor = function (.data = integer(0)) 
 .data, validator = function
    (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), chains = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), iter_warmup = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), iter_sampling = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), max_treedepth = structure(list(class = "integer",
    constructor_name = "integer", constructor = function (.data = integer(0)) 
 .data,
    validator = function (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), adapt_delta = structure(list(classes =
    list(structure(list(class = "integer", constructor_name = "integer", constructor =
    function (.data = integer(0)) 
 .data, validator = function (object) 
 {
     if
    (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"), structure(list(class = "double", constructor_name =
    "double", constructor = function (.data = numeric(0)) 
 .data, validator = function
    (object) 
 {
     if (base_class(object) != name) {
        
    sprintf("Underlying data must be <\%s> not <\%s>", name, base_class(object))
     }

    }), class = "S7_base_class"))), class = "S7_union")),
  exclusions = Exclusions()
)
}
\arguments{
\item{job_id}{A string specifying the job.}

\item{task_id}{A string specifying the task.}

\item{min_reference_date}{A string representing the minimum reference
date. Formatted as "YYYY-MM-DD".}

\item{max_reference_date}{A string representing the maximum reference
date. Formatted as "YYYY-MM-DD".}

\item{report_date}{A string representing the report date. Formatted as
"YYYY-MM-DD".}

\item{as_of_date}{A string representing the as-of date. Formatted as
"YYYY-MM-DD".}

\item{disease}{A string specifying the disease being modeled.}

\item{geo_value}{A string specifying the geographic value, usually a state.}

\item{geo_type}{A string specifying the geographic type, usually "state".}

\item{seed}{An integer for setting the random seed.}

\item{horizon}{An integer specifying the forecasting horizon.}

\item{model}{A string specifying the model to be used.}

\item{config_version}{A numeric value specifying the configuration version.}

\item{quantile_width}{A vector of numeric values representing the desired
quantiles.}

\item{data}{An instance of \code{Data} class containing data configurations.}

\item{priors}{A list of lists. The first level should contain the key \code{rt}
with elements \code{mean} and \code{sd} and the key \code{gp} with element \code{alpha_sd}.}

\item{parameters}{An instance of \code{Parameters} class containing parameter
configurations.}

\item{sampler_opts}{A list. The Stan sampler options to be passed through
EpiNow2. It has required keys: \code{cores}, \code{chains}, \code{iter_warmup},
\code{iter_sampling}, \code{max_treedepth}, and \code{adapt_delta}.}

\item{exclusions}{An instance of \code{Exclusions} class containing exclusion
criteria.}
}
\description{
Represents the complete configuration for the pipeline.
}
