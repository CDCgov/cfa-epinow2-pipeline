% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/config.R
\name{fetch_config}
\alias{fetch_config}
\title{Fetch the config from an external resource}
\usage{
fetch_config(
  config_path,
  local_dest,
  blob_storage_container,
  config_schema_path = system.file("extdata/config_schema.json", package =
    "CFAEpiNow2Pipeline")
)
}
\arguments{
\item{config_path}{The path to the config file, either in the local
filesystem or with an Azure Blob Storage container. If
\code{blob_storage_container} is specified, the path is assumed to be within
the specified container otherwise it is assumed to be in the local
filesystem.}

\item{local_dest}{The local directory to write the config to when downloading
it from \code{blob_storage_container}. This argument is ignored unless
\code{blob_storage_container} is specified.}

\item{blob_storage_container}{The storage container holding the config at
\code{config_path}}

\item{config_schema_path}{The path to the file holding the schema for the
config json for the validator to use.}
}
\value{
A list of lists, the config for the run.
}
\description{
This step is the first part of the modeling pipeline. It looks to Azure Blob
and downloads the Rt model run's config to the local config (if
\code{blob_storage_container} is specified), reads the config in from the
filesystem, and validates that it matches expectations. If any of these steps
fail, the pipeline fails with an informative error message. Note, however,
that a failure in this initial step suggests that something fundamental is
misspecified and the logs will likely not be preserved in a Blob Container if
running in Azure.
}
\details{
The validation relies on \code{inst/data/config_schema.json} for validation. This
file is in \code{json-schema} notation and generated programatically via
https://www.jsonschema.net/.
}
